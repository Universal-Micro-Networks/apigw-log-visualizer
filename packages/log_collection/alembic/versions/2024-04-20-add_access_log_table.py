"""add_access_log_table

Revision ID: 0b965ab305f5
Revises: 3672cf4a76f3
Create Date: 2024-04-20 23:01:54.907466

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "0b965ab305f5"
down_revision: Union[str, None] = "3672cf4a76f3"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade():
    # 前処理
    pre_upgrade()

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "access_logs",
        sa.Column(
            "id",
            sa.BigInteger(),
            sa.Identity(always=False, start=1, cycle=False),
            nullable=False,
        ),
        sa.Column("request_id", sa.UUID(), nullable=False),
        sa.Column("api_key", sa.String(), nullable=False),
        sa.Column("api_key_id", sa.String(), nullable=False),
        sa.Column("request_time", sa.TIMESTAMP(), nullable=False),
        sa.Column("request_time_epoch", sa.BIGINT(), nullable=False),
        sa.Column("api_id", sa.String(), nullable=False),
        sa.Column("stage", sa.String(), nullable=False),
        sa.Column("http_method", sa.String(), nullable=False),
        sa.Column("protocol", sa.String(), nullable=False),
        sa.Column("domain_name", sa.String(), nullable=False),
        sa.Column("path", sa.String(), nullable=False),
        sa.Column("resource_path", sa.String(), nullable=False),
        sa.Column("user_agent", sa.String(), nullable=False),
        sa.Column("status", sa.INTEGER(), nullable=False),
        sa.Column("response_latency", sa.INTEGER(), nullable=False),
        sa.Column("error_message", sa.String(), nullable=False),
        sa.Column("response_type", sa.String(), nullable=False),
        sa.Column("response_length", sa.INTEGER(), nullable=False),
        sa.Column("integration_status", sa.INTEGER(), nullable=False),
        sa.Column("integration_latency", sa.INTEGER(), nullable=False),
        sa.Column("integration_error", sa.String(), nullable=False),
        sa.Column("ip", sa.String(), nullable=False),
        sa.Column("caller", sa.String(), nullable=False),
        sa.Column("user", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_access_logs")),
        schema="log_analysis",
    )
    op.create_index(
        "api_key_id_idx",
        "access_logs",
        ["api_key_id"],
        unique=False,
        schema="log_analysis",
    )
    op.create_index(
        "request_time_epoch_idx",
        "access_logs",
        ["request_time_epoch"],
        unique=False,
        schema="log_analysis",
    )
    op.create_index(
        "response_latency_idx",
        "access_logs",
        ["response_latency"],
        unique=False,
        schema="log_analysis",
    )
    op.create_index(
        "stage_idx", "access_logs", ["stage"], unique=False, schema="log_analysis"
    )
    op.create_index(
        "status_idx", "access_logs", ["status"], unique=False, schema="log_analysis"
    )
    # ### end Alembic commands ###

    # 後処理
    post_upgrade()


def downgrade():
    # 前処理
    pre_downgrade()

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("status_idx", table_name="access_logs", schema="log_analysis")
    op.drop_index("stage_idx", table_name="access_logs", schema="log_analysis")
    op.drop_index(
        "response_latency_idx", table_name="access_logs", schema="log_analysis"
    )
    op.drop_index(
        "request_time_epoch_idx", table_name="access_logs", schema="log_analysis"
    )
    op.drop_index("api_key_id_idx", table_name="access_logs", schema="log_analysis")
    op.drop_table("access_logs", schema="log_analysis")
    # ### end Alembic commands ###

    # 後処理
    post_downgrade()


def pre_upgrade():
    # スキーマ更新前に実行する必要がある処理
    pass


def post_upgrade():
    # スキーマ更新後に実行する必要がある処理
    pass


def pre_downgrade():
    # スキーマ更新前に実行する必要がある処理
    pass


def post_downgrade():
    # スキーマ更新後に実行する必要がある処理
    pass
